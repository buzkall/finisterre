<code-style>
    - Use PHP v8.3 features.
    - Follow pint.json coding rules.
    - Enforce strict types and array shapes via PHPStan.
    - Don't add phpDocs to methods.
    - Inline variables when they are only used once.
    - Never, ever, made up methods that don't exist. Check if the library or package has the method you need.
    - When using a model or a controller never use the full namespace, use the short name. and include the use statement on top of the file.
</code-style>

<project-structure>
    - Delete .gitkeep when adding a file.
    - Stick to existing structure-no new folders without approval.
    - Avoid DB::; use Model::query() only.
    - No dependency changes without explicit approval.
</project-structure>

<directories>
    <controllers>
        - No abstract/base controllers in app/Http/Controllers.
        - Controllers must use dependency injection for repositories.
    </controllers>
    <actions>
        - Use the Actions pattern and name classes as verbs.
        - Example: public function store(CreateTodoRequest $request, CreateTodoAction $action)
    </actions>
    <models>
        - Create $fillable in a single line.
        - Create all relationships
    </models>
    <migrations>
        - Migration file names must follow the 'create_table_name_table' convention or 'update_table_name_table'.
    </migrations>
</directories>

<testing>
    - Use Pest PHP for all tests.
    - Run composer lint after changes.
    - Run composer test before finalizing.
    - Do not remove tests without approval.
    - All code must be tested.
    - Generate a {Model}Factory with each model or modify the existing one when adding fields
    <test-directories>
        - Console: tests/Feature/Console
        - Controllers: tests/Feature/Http
        - Actions: tests/Unit/Actions
        - Models: tests/Unit/Models
        - Jobs: tests/Unit/Jobs
    </test-directories>
</testing>

<styling-ui>
    - Use Tailwind CSS.
    - Keep UI minimal.
    - Use @csrf directive in all Blade forms.
</styling-ui>

<task-completion>
    - Recompile assets after frontend changes.
    - Follow all rules before marking tasks complete.
    - Keep your explanations short and to the point.
</task-completion>
